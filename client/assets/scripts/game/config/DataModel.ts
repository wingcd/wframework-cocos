// DO NOT EDIT!
// This code is auto generated by go-xlsx-exporter
// VERSION 1.3
// go-protobuf v1.27.1
import { DataAccess, DataTable } from '../../framework/plugins/config/DataAccess';
import { RewardData, Order, LevelRandomData } from './ConfigExtension';

import $protobuf from "protobufjs";

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

declare module $utils {
    interface Long {

    }
}

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {} as any);

export interface Long {
    /** Low bits */
    low: number;

    /** High bits */
    high: number;

    /** Whether unsigned or not */
    unsigned: boolean;
}

export class DataConverter {
    static convertHandler: (data: DataModel | object, fieldName:string, value: string, alias?: string)=>any;      
    static getConvertData(target: any, fieldName: string, value: any, alias?: string, cachable?: boolean) {
        target._converted = target._converted || {};
        if(target._converted[fieldName])
        {
            return target._converted[fieldName];
        }

        if(DataConverter.convertHandler == null)
        {
            throw `convert field ${fieldName} value need a convetor`;
        }

        var data = DataConverter.convertHandler(target, fieldName, value, alias);
        if(cachable) {
            target._converted[fieldName] = data;
        }
        return data;
    }
}

export class DataModel {
    private _converted = {};

    protected getConvertData(fieldName: string, value: any, alias?: string, cachable?: boolean): any
    {
        if(this._converted[fieldName])
        {
            return this._converted[fieldName];
        }

        if(DataConverter.convertHandler == null)
        {
            throw `convert field ${fieldName} value need a convetor`;
        }

        var data = DataConverter.convertHandler(this, fieldName, value, alias);
        if(cachable) {
            this._converted[fieldName] = data;
        }
        return data;
    } 
}

export namespace GameConfig {
    var ALLTYPES: {[key: string]: any} = {};

    
    // Defined in table: data/define.xlsx:define;
    export enum EResType {
        
        UNKNOWN = 0,
        
        
        Icon = 1,
        
        
        Scene = 2,
        
        
        Particle = 4,
        
        
        Effect = 5,
        
        
        Sound = 6,
        
        
        Prefab = 7,
        
    }
    
    // Defined in table: data/define.xlsx:define;
    export enum EItemType {
        
        UNKNOWN = 0,
        
         /** 大物品 */ 
        Big = 1,
        
         /** 中物品 */ 
        Middle = 2,
        
         /** 小物品 */ 
        Small = 3,
        
         /** 微小物品 */ 
        Tiny = 4,
        
    }
    
    // Defined in table: data/define.xlsx:define;
    export enum ETaskType {
        
        UNKNOWN = 0,
        
         /** 登录 */ 
        Login = 1,
        
         /** 看视频 */ 
        VideoCount = 2,
        
         /** 通关 */ 
        LevelSucess = 3,
        
         /** 挑战 */ 
        ChallengeSucess = 4,
        
         /** 使用道具,需要类型参数 */ 
        UseTool = 5,
        
         /** 获取星星 */ 
        GetStar = 6,
        
         /** 搜集怪兽 */ 
        GetAnimal = 7,
        
         /** 最高连消 */ 
        MaxCombo = 8,
        
         /** 消除次数 */ 
        MergeCount = 9,
        
         /** 关卡宝箱任务 */ 
        LevelBox = 10,
        
         /** 星星宝箱任务 */ 
        StarBox = 11,
        
         /** 连续关卡任务 */ 
        ContinueLevel = 12,
        
    }
    
    // Defined in table: data/define.xlsx:define;
    export enum EPropType {
        
        UNKNOWN = 0,
        
         /** 资源 */ 
        Resource = 1,
        
         /** 道具 */ 
        ToolItem = 2,
        
         /** 动物 */ 
        Animal = 3,
        
    }
    
    // Defined in table: data/define.xlsx:define;
    export enum EPropResType {
        
        UNKNOWN = 0,
        
         /** 金币 */ 
        Gold = 1,
        
         /** 体力 */ 
        Energy = 2,
        
    }
    
    // Defined in table: data/define.xlsx:define;
    export enum EPropToolType {
        
        UNKNOWN = 0,
        
         /** 移除 */ 
        Remove = 1,
        
         /** 收集 */ 
        Collect = 2,
        
         /** 打乱 */ 
        Shuffle = 3,
        
         /** 大火箭 */ 
        BigRocket = 4,
        
         /** 小火箭 */ 
        SmallRocket = 5,
        
         /** 大沙漏 */ 
        BigTimer = 6,
        
         /** 小沙漏 */ 
        SmallTimer = 7,
        
    }
    
    // Defined in table: data/define.xlsx:define;
    export enum EGoodItemType {
         /** 普通物品 */ 
        Normal = 0,
        
         /** 动物 */ 
        Animal = 1,
        
         /** 道具 */ 
        Prop = 2,
        
    }
    
    // Defined in table: data/define.xlsx:define;
    export enum EStageType {
        
        UNKNOWN = 0,
        
         /** 矩形 */ 
        Quad = 1,
        
         /** 圆形 */ 
        Circle = 2,
        
    }
    

    
    // Defined in table: data/resources.xlsx:icon;data/resources.xlsx:scene;data/resources.xlsx:prefab;data/resources.xlsx:particle;data/resources.xlsx:effect;data/resources.xlsx:sound;
    /** Properties of a Resources. */
    export interface IResources {
        
         /** 资源ID */
        ID?: (number|null);
             
        
         /** 资源名 */
        ResName?: (string|null);
             
        
         /** 包名 */
        PackName?: (string|null);
             
        
         /** 路径 */
        Route?: (string|null);
             
        
         /** 类型 */
        Type?: (EResType|null);
             
        
         /** 名称 */
        Name?: (string|null);
             
         
    }

     /** Represents a Resources. */
    export class Resources extends DataModel implements IResources { 
        private static __id__ = 104;
        private static __type_name__ = "Resources";
        private static __array_type_name__ = "Resources_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[Resources.__array_type_name__];
        }

         /** 资源ID */
                ID?: (number|null) = 0;
                    
            
         /** 资源名 */
                ResName?: (string|null) = "";
                    
            
         /** 包名 */
                PackName?: (string|null) = "";
                    
            
         /** 路径 */
                Route?: (string|null) = "";
                    
            
         /** 类型 */
                Type?: (EResType|null) = EResType.UNKNOWN;
                    
            
         /** 名称 */
                Name?: (string|null) = "";
                    
            
        

        /**
         * Constructs a new Resources.
         * @param [properties] Properties to set
         */
        constructor(properties?: IResources) {
            super();
            
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Resources): Resources {
            return new Resources(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Resources {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Resources();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:
                    message.ResName = reader.string();  
                    break;         
                case 3:
                    message.PackName = reader.string();  
                    break;         
                case 4:
                    message.Route = reader.string();  
                    break;         
                case 5:
                    message.Type = reader.uint32();  
                    break;         
                case 6:
                    message.Name = reader.string();  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Resources"] = Resources;

    
    // Defined in table: data/resources.xlsx:icon;data/resources.xlsx:scene;data/resources.xlsx:prefab;data/resources.xlsx:particle;data/resources.xlsx:effect;data/resources.xlsx:sound;
    /** Properties of a Resources_ARRAY. */
    export interface IResources_ARRAY {
        
        
        Items?: (Resources[]|null);
             
         
    }

     /** Represents a Resources_ARRAY. */
    export class Resources_ARRAY extends DataModel implements IResources_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "Resources_ARRAY";

        
                Items?: (Resources[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new Resources_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: IResources_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Resources_ARRAY): Resources_ARRAY {
            return new Resources_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Resources_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Resources_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(Resources.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Resources_ARRAY"] = Resources_ARRAY;

    
    // Defined in table: data/settings.xlsx:config;
    /** Properties of a Settings. */
    export interface ISettings {
        
         /** ID */
        ID?: (number|null);
             
        
         /** 每日免费次数 */
        FREE_PLAY_COUNT?: (number|null);
             
        
         /** 初始体力 */
        INIT_ENERGY?: (number|null);
             
        
         /** 最大体力恢复值 */
        MAX_RECOVER_ENERGY?: (number|null);
             
        
         /** 体力恢复时间s */
        ENERGY_RECOVER_TIME?: (number|null);
             
        
         /** 嘲讽语句ID */
        FAIL_TAUNT_STRING_IDS?: (number[]|null);
             
        
         /** 结束进度词语ID */
        FAIL_TAUNT_WORDS_IDS?: (number[]|null);
             
        
         /** 加游戏圈奖励动物ID */
        SUBSCRIBE_AWARD_ANIMAL?: (number|null);
             
        
         /** 加游戏圈奖励（type,id,num） */
        SUBSCRIBE_AWARD?: (string|null);
             
        getSUBSCRIBE_AWARD(): Readonly<RewardData[]>;
        
         /** 连消倒计时长s */
        COMBO_TIME?: (number|null);
             
        
         /** 复活金币 */
        RELIVE_GOLD_COST?: (number|null);
             
        
         /** 每日最大分享获取体力次数 */
        DAILY_SHARE_ENERGY_COUNT?: (number|null);
             
        
         /** 每日最大视频获取体力次数 */
        DAILY_VIDEO_ENERGY_COUNT?: (number|null);
             
        
         /** 每日礼包礼品 */
        DAILY_LUCKY_GIFTS?: (string|null);
             
        getDAILY_LUCKY_GIFTS(): Readonly<RewardData[]>;
        
         /** 每日礼包礼品 */
        DAILY_LUCKY_GIFTS_FIRST?: (string|null);
             
        getDAILY_LUCKY_GIFTS_FIRST(): Readonly<RewardData[]>;
        
         /** 七日签到奖励-1 */
        SEVEN_SIGN_AWARED_1?: (string|null);
             
        getSEVEN_SIGN_AWARED_1(): Readonly<RewardData[]>;
        
         /** 七日签到奖励-2 */
        SEVEN_SIGN_AWARED_2?: (string|null);
             
        getSEVEN_SIGN_AWARED_2(): Readonly<RewardData[]>;
        
         /** 七日签到奖励-3 */
        SEVEN_SIGN_AWARED_3?: (string|null);
             
        getSEVEN_SIGN_AWARED_3(): Readonly<RewardData[]>;
        
         /** 七日签到奖励-4 */
        SEVEN_SIGN_AWARED_4?: (string|null);
             
        getSEVEN_SIGN_AWARED_4(): Readonly<RewardData[]>;
        
         /** 七日签到奖励-5 */
        SEVEN_SIGN_AWARED_5?: (string|null);
             
        getSEVEN_SIGN_AWARED_5(): Readonly<RewardData[]>;
        
         /** 七日签到奖励-6 */
        SEVEN_SIGN_AWARED_6?: (string|null);
             
        getSEVEN_SIGN_AWARED_6(): Readonly<RewardData[]>;
        
         /** 七日签到奖励-7 */
        SEVEN_SIGN_AWARED_7?: (string|null);
             
        getSEVEN_SIGN_AWARED_7(): Readonly<RewardData[]>;
        
         /** 七日签到奖励-7-特殊 */
        SEVEN_SIGN_AWARED_8?: (string|null);
             
        getSEVEN_SIGN_AWARED_8(): Readonly<RewardData[]>;
        
         /** 刷新动物通关次数 */
        DAILY_REFRESH_LEVEL_COUNT?: (number|null);
             
        
         /** 每局炸弹最大使用次数 */
        MAX_BOMB_COUNT?: (number|null);
             
        
         /** 每局刷新最大使用次数 */
        MAX_REFRESH_COUNT?: (number|null);
             
        
         /** 每局提示最大使用次数 */
        MAX_TIPS_COUNT?: (number|null);
             
        
         /** 每局撤回最大使用次数 */
        MAX_UNDO_COUNT?: (number|null);
             
         
    }

     /** Represents a Settings. */
    export class Settings extends DataModel implements ISettings { 
        private static __id__ = 110;
        private static __type_name__ = "Settings";
        private static __array_type_name__ = "Settings_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[Settings.__array_type_name__];
        }

         /** ID */
                ID?: (number|null) = 0;
                    
            
         /** 每日免费次数 */
                FREE_PLAY_COUNT?: (number|null) = 0;
                    
            
         /** 初始体力 */
                INIT_ENERGY?: (number|null) = 0;
                    
            
         /** 最大体力恢复值 */
                MAX_RECOVER_ENERGY?: (number|null) = 0;
                    
            
         /** 体力恢复时间s */
                ENERGY_RECOVER_TIME?: (number|null) = 0;
                    
            
         /** 嘲讽语句ID */
                FAIL_TAUNT_STRING_IDS?: (number[]|null) = $util.emptyArray;
            
         /** 结束进度词语ID */
                FAIL_TAUNT_WORDS_IDS?: (number[]|null) = $util.emptyArray;
            
         /** 加游戏圈奖励动物ID */
                SUBSCRIBE_AWARD_ANIMAL?: (number|null) = 0;
                    
            
         /** 加游戏圈奖励（type,id,num） */
                SUBSCRIBE_AWARD?: (string|null) = "";
                    
                
        getSUBSCRIBE_AWARD(): Readonly<RewardData[]> {
            return this.getConvertData("SUBSCRIBE_AWARD", this.SUBSCRIBE_AWARD, 'RewardData[]', true);
        };
            
         /** 连消倒计时长s */
                COMBO_TIME?: (number|null) = 0;
                    
            
         /** 复活金币 */
                RELIVE_GOLD_COST?: (number|null) = 0;
                    
            
         /** 每日最大分享获取体力次数 */
                DAILY_SHARE_ENERGY_COUNT?: (number|null) = 0;
                    
            
         /** 每日最大视频获取体力次数 */
                DAILY_VIDEO_ENERGY_COUNT?: (number|null) = 0;
                    
            
         /** 每日礼包礼品 */
                DAILY_LUCKY_GIFTS?: (string|null) = "";
                    
                
        getDAILY_LUCKY_GIFTS(): Readonly<RewardData[]> {
            return this.getConvertData("DAILY_LUCKY_GIFTS", this.DAILY_LUCKY_GIFTS, 'RewardData[]', true);
        };
            
         /** 每日礼包礼品 */
                DAILY_LUCKY_GIFTS_FIRST?: (string|null) = "";
                    
                
        getDAILY_LUCKY_GIFTS_FIRST(): Readonly<RewardData[]> {
            return this.getConvertData("DAILY_LUCKY_GIFTS_FIRST", this.DAILY_LUCKY_GIFTS_FIRST, 'RewardData[]', true);
        };
            
         /** 七日签到奖励-1 */
                SEVEN_SIGN_AWARED_1?: (string|null) = "";
                    
                
        getSEVEN_SIGN_AWARED_1(): Readonly<RewardData[]> {
            return this.getConvertData("SEVEN_SIGN_AWARED_1", this.SEVEN_SIGN_AWARED_1, 'RewardData[]', true);
        };
            
         /** 七日签到奖励-2 */
                SEVEN_SIGN_AWARED_2?: (string|null) = "";
                    
                
        getSEVEN_SIGN_AWARED_2(): Readonly<RewardData[]> {
            return this.getConvertData("SEVEN_SIGN_AWARED_2", this.SEVEN_SIGN_AWARED_2, 'RewardData[]', true);
        };
            
         /** 七日签到奖励-3 */
                SEVEN_SIGN_AWARED_3?: (string|null) = "";
                    
                
        getSEVEN_SIGN_AWARED_3(): Readonly<RewardData[]> {
            return this.getConvertData("SEVEN_SIGN_AWARED_3", this.SEVEN_SIGN_AWARED_3, 'RewardData[]', true);
        };
            
         /** 七日签到奖励-4 */
                SEVEN_SIGN_AWARED_4?: (string|null) = "";
                    
                
        getSEVEN_SIGN_AWARED_4(): Readonly<RewardData[]> {
            return this.getConvertData("SEVEN_SIGN_AWARED_4", this.SEVEN_SIGN_AWARED_4, 'RewardData[]', true);
        };
            
         /** 七日签到奖励-5 */
                SEVEN_SIGN_AWARED_5?: (string|null) = "";
                    
                
        getSEVEN_SIGN_AWARED_5(): Readonly<RewardData[]> {
            return this.getConvertData("SEVEN_SIGN_AWARED_5", this.SEVEN_SIGN_AWARED_5, 'RewardData[]', true);
        };
            
         /** 七日签到奖励-6 */
                SEVEN_SIGN_AWARED_6?: (string|null) = "";
                    
                
        getSEVEN_SIGN_AWARED_6(): Readonly<RewardData[]> {
            return this.getConvertData("SEVEN_SIGN_AWARED_6", this.SEVEN_SIGN_AWARED_6, 'RewardData[]', true);
        };
            
         /** 七日签到奖励-7 */
                SEVEN_SIGN_AWARED_7?: (string|null) = "";
                    
                
        getSEVEN_SIGN_AWARED_7(): Readonly<RewardData[]> {
            return this.getConvertData("SEVEN_SIGN_AWARED_7", this.SEVEN_SIGN_AWARED_7, 'RewardData[]', true);
        };
            
         /** 七日签到奖励-7-特殊 */
                SEVEN_SIGN_AWARED_8?: (string|null) = "";
                    
                
        getSEVEN_SIGN_AWARED_8(): Readonly<RewardData[]> {
            return this.getConvertData("SEVEN_SIGN_AWARED_8", this.SEVEN_SIGN_AWARED_8, 'RewardData[]', true);
        };
            
         /** 刷新动物通关次数 */
                DAILY_REFRESH_LEVEL_COUNT?: (number|null) = 0;
                    
            
         /** 每局炸弹最大使用次数 */
                MAX_BOMB_COUNT?: (number|null) = 0;
                    
            
         /** 每局刷新最大使用次数 */
                MAX_REFRESH_COUNT?: (number|null) = 0;
                    
            
         /** 每局提示最大使用次数 */
                MAX_TIPS_COUNT?: (number|null) = 0;
                    
            
         /** 每局撤回最大使用次数 */
                MAX_UNDO_COUNT?: (number|null) = 0;
                    
            
        

        /**
         * Constructs a new Settings.
         * @param [properties] Properties to set
         */
        constructor(properties?: ISettings) {
            super();
            
            
            this.FAIL_TAUNT_STRING_IDS = [];
            
            this.FAIL_TAUNT_WORDS_IDS = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Settings): Settings {
            return new Settings(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Settings {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Settings();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:
                    message.FREE_PLAY_COUNT = reader.uint32();  
                    break;         
                case 3:
                    message.INIT_ENERGY = reader.uint32();  
                    break;         
                case 4:
                    message.MAX_RECOVER_ENERGY = reader.uint32();  
                    break;         
                case 5:
                    message.ENERGY_RECOVER_TIME = reader.uint32();  
                    break;         
                case 6:                    
                    if (!(message.FAIL_TAUNT_STRING_IDS && message.FAIL_TAUNT_STRING_IDS.length))
                        message.FAIL_TAUNT_STRING_IDS = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.FAIL_TAUNT_STRING_IDS.push(reader.uint32());
                    } else
                        message.FAIL_TAUNT_STRING_IDS.push(reader.uint32());   
                    break;         
                case 7:                    
                    if (!(message.FAIL_TAUNT_WORDS_IDS && message.FAIL_TAUNT_WORDS_IDS.length))
                        message.FAIL_TAUNT_WORDS_IDS = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.FAIL_TAUNT_WORDS_IDS.push(reader.uint32());
                    } else
                        message.FAIL_TAUNT_WORDS_IDS.push(reader.uint32());   
                    break;         
                case 8:
                    message.SUBSCRIBE_AWARD_ANIMAL = reader.uint32();  
                    break;         
                case 9:
                    message.SUBSCRIBE_AWARD = reader.string();  
                    break;         
                case 10:
                    message.COMBO_TIME = reader.uint32();  
                    break;         
                case 11:
                    message.RELIVE_GOLD_COST = reader.uint32();  
                    break;         
                case 12:
                    message.DAILY_SHARE_ENERGY_COUNT = reader.uint32();  
                    break;         
                case 13:
                    message.DAILY_VIDEO_ENERGY_COUNT = reader.uint32();  
                    break;         
                case 14:
                    message.DAILY_LUCKY_GIFTS = reader.string();  
                    break;         
                case 15:
                    message.DAILY_LUCKY_GIFTS_FIRST = reader.string();  
                    break;         
                case 16:
                    message.SEVEN_SIGN_AWARED_1 = reader.string();  
                    break;         
                case 17:
                    message.SEVEN_SIGN_AWARED_2 = reader.string();  
                    break;         
                case 18:
                    message.SEVEN_SIGN_AWARED_3 = reader.string();  
                    break;         
                case 19:
                    message.SEVEN_SIGN_AWARED_4 = reader.string();  
                    break;         
                case 20:
                    message.SEVEN_SIGN_AWARED_5 = reader.string();  
                    break;         
                case 21:
                    message.SEVEN_SIGN_AWARED_6 = reader.string();  
                    break;         
                case 22:
                    message.SEVEN_SIGN_AWARED_7 = reader.string();  
                    break;         
                case 23:
                    message.SEVEN_SIGN_AWARED_8 = reader.string();  
                    break;         
                case 24:
                    message.DAILY_REFRESH_LEVEL_COUNT = reader.uint32();  
                    break;         
                case 25:
                    message.MAX_BOMB_COUNT = reader.uint32();  
                    break;         
                case 26:
                    message.MAX_REFRESH_COUNT = reader.uint32();  
                    break;         
                case 27:
                    message.MAX_TIPS_COUNT = reader.uint32();  
                    break;         
                case 28:
                    message.MAX_UNDO_COUNT = reader.uint32();  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Settings"] = Settings;

    
    // Defined in table: data/settings.xlsx:config;
    /** Properties of a Settings_ARRAY. */
    export interface ISettings_ARRAY {
        
        
        Items?: (Settings[]|null);
             
         
    }

     /** Represents a Settings_ARRAY. */
    export class Settings_ARRAY extends DataModel implements ISettings_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "Settings_ARRAY";

        
                Items?: (Settings[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new Settings_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: ISettings_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Settings_ARRAY): Settings_ARRAY {
            return new Settings_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Settings_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Settings_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(Settings.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Settings_ARRAY"] = Settings_ARRAY;

    
    // Defined in table: data/item.xlsx:item;
    /** Properties of a Item. */
    export interface IItem {
        
         /** ID */
        ID?: (number|null);
             
        
         /** 资源名 */
        ResID?: (number|null);
             
        
         /** 场景类型 */
        Scene?: (number|null);
             
        
         /** 组ID,同一个组只能出现一次,0-不管 */
        GroupID?: (number|null);
             
        
         /** 类型 */
        Type?: (EItemType|null);
             
        
         /** 物品类型 */
        ItemType?: (EGoodItemType|null);
             
        
         /** 开始触摸声音 */
        TouchBeginSoundID?: (number|null);
             
        
         /** 结束触摸声音 */
        TouchEndSoundID?: (number|null);
             
        
         /** 选中声音 */
        SelectSoundID?: (number|null);
             
        
         /** 合成声音 */
        CombineSoundID?: (number|null);
             
         
    }

     /** Represents a Item. */
    export class Item extends DataModel implements IItem { 
        private static __id__ = 200;
        private static __type_name__ = "Item";
        private static __array_type_name__ = "Item_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[Item.__array_type_name__];
        }

         /** ID */
                ID?: (number|null) = 0;
                    
            
         /** 资源名 */
                ResID?: (number|null) = 0;
                    
            
         /** 场景类型 */
                Scene?: (number|null) = 0;
                    
            
         /** 组ID,同一个组只能出现一次,0-不管 */
                GroupID?: (number|null) = 0;
                    
            
         /** 类型 */
                Type?: (EItemType|null) = EItemType.UNKNOWN;
                    
            
         /** 物品类型 */
                ItemType?: (EGoodItemType|null) = EGoodItemType.Normal;
                    
            
         /** 开始触摸声音 */
                TouchBeginSoundID?: (number|null) = 0;
                    
            
         /** 结束触摸声音 */
                TouchEndSoundID?: (number|null) = 0;
                    
            
         /** 选中声音 */
                SelectSoundID?: (number|null) = 0;
                    
            
         /** 合成声音 */
                CombineSoundID?: (number|null) = 0;
                    
            
        

        /**
         * Constructs a new Item.
         * @param [properties] Properties to set
         */
        constructor(properties?: IItem) {
            super();
            
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Item): Item {
            return new Item(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Item {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:
                    message.ResID = reader.uint32();  
                    break;         
                case 3:
                    message.Scene = reader.uint32();  
                    break;         
                case 4:
                    message.GroupID = reader.uint32();  
                    break;         
                case 5:
                    message.Type = reader.uint32();  
                    break;         
                case 6:
                    message.ItemType = reader.uint32();  
                    break;         
                case 7:
                    message.TouchBeginSoundID = reader.uint32();  
                    break;         
                case 8:
                    message.TouchEndSoundID = reader.uint32();  
                    break;         
                case 9:
                    message.SelectSoundID = reader.uint32();  
                    break;         
                case 10:
                    message.CombineSoundID = reader.uint32();  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Item"] = Item;

    
    // Defined in table: data/item.xlsx:item;
    /** Properties of a Item_ARRAY. */
    export interface IItem_ARRAY {
        
        
        Items?: (Item[]|null);
             
         
    }

     /** Represents a Item_ARRAY. */
    export class Item_ARRAY extends DataModel implements IItem_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "Item_ARRAY";

        
                Items?: (Item[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new Item_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: IItem_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Item_ARRAY): Item_ARRAY {
            return new Item_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Item_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Item_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(Item.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Item_ARRAY"] = Item_ARRAY;

    
    // Defined in table: data/level.xlsx:Level;
    /** Properties of a Level. */
    export interface ILevel {
        
         /** ID */
        ID?: (number|null);
             
        
         /** 关卡资源 */
        MapID?: (number|null);
             
        
         /** 场景资源 */
        StageID?: (number|null);
             
        
         /** 可在普通关显示 */
        CanShowInNormal?: (boolean|null);
             
        
         /** 通关奖励 */
        Awards?: (string|null);
             
        getAwards(): Readonly<RewardData[]>;
        
         /** 订单数(范围值) */
        OrderCount?: (number[]|null);
             
        
         /** 初始定单(出口的索引，从上到下，从左到右) */
        InitOrders?: (number[]|null);
             
        
         /** 初始块 */
        InitBlocks?: (number[]|null);
             
        
         /** 底部块限制数量（0-不限制） */
        BlockCount?: (number|null);
             
        
         /** 动态配置 */
        Dynamic?: (string|null);
             
        getDynamic(): Readonly<LevelRandomData>;
        
         /** 可出现的特殊block(#对应特殊block的id) */
        SpBlock?: (number[]|null);
             
        
         /** 特殊block出现概率(#特殊block的出现概率百分比) */
        SpShow?: (number|null);
             
        
         /** 特殊block权重1(#顺序与SpBlock字段对应,#不是block刷新的权重，是确定刷新后刷哪个block的权重) */
        SpWeight1?: (number[]|null);
             
        
         /** 特殊block权重2(顺序与SpBlock字段对应,#不是block刷新的权重，是确定刷新后刷哪个block的权重) */
        SpWeight2?: (number[]|null);
             
         
    }

     /** Represents a Level. */
    export class Level extends DataModel implements ILevel { 
        private static __id__ = 201;
        private static __type_name__ = "Level";
        private static __array_type_name__ = "Level_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[Level.__array_type_name__];
        }

         /** ID */
                ID?: (number|null) = 0;
                    
            
         /** 关卡资源 */
                MapID?: (number|null) = 0;
                    
            
         /** 场景资源 */
                StageID?: (number|null) = 0;
                    
            
         /** 可在普通关显示 */
                CanShowInNormal?: (boolean|null) = false;
                    
            
         /** 通关奖励 */
                Awards?: (string|null) = "";
                    
                
        getAwards(): Readonly<RewardData[]> {
            return this.getConvertData("Awards", this.Awards, 'RewardData[]', true);
        };
            
         /** 订单数(范围值) */
                OrderCount?: (number[]|null) = $util.emptyArray;
            
         /** 初始定单(出口的索引，从上到下，从左到右) */
                InitOrders?: (number[]|null) = $util.emptyArray;
            
         /** 初始块 */
                InitBlocks?: (number[]|null) = $util.emptyArray;
            
         /** 底部块限制数量（0-不限制） */
                BlockCount?: (number|null) = 0;
                    
            
         /** 动态配置 */
                Dynamic?: (string|null) = "";
                    
                
        getDynamic(): Readonly<LevelRandomData> {
            return this.getConvertData("Dynamic", this.Dynamic, 'LevelRandomData', true);
        };
            
         /** 可出现的特殊block(#对应特殊block的id) */
                SpBlock?: (number[]|null) = $util.emptyArray;
            
         /** 特殊block出现概率(#特殊block的出现概率百分比) */
                SpShow?: (number|null) = 0;
                    
            
         /** 特殊block权重1(#顺序与SpBlock字段对应,#不是block刷新的权重，是确定刷新后刷哪个block的权重) */
                SpWeight1?: (number[]|null) = $util.emptyArray;
            
         /** 特殊block权重2(顺序与SpBlock字段对应,#不是block刷新的权重，是确定刷新后刷哪个block的权重) */
                SpWeight2?: (number[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new Level.
         * @param [properties] Properties to set
         */
        constructor(properties?: ILevel) {
            super();
            
            
            this.OrderCount = [];
            
            this.InitOrders = [];
            
            this.InitBlocks = [];
            
            this.SpBlock = [];
            
            this.SpWeight1 = [];
            
            this.SpWeight2 = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Level): Level {
            return new Level(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Level {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Level();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:
                    message.MapID = reader.uint32();  
                    break;         
                case 3:
                    message.StageID = reader.uint32();  
                    break;         
                case 4:
                    message.CanShowInNormal = reader.bool();  
                    break;         
                case 5:
                    message.Awards = reader.string();  
                    break;         
                case 6:                    
                    if (!(message.OrderCount && message.OrderCount.length))
                        message.OrderCount = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.OrderCount.push(reader.int32());
                    } else
                        message.OrderCount.push(reader.int32());   
                    break;         
                case 7:                    
                    if (!(message.InitOrders && message.InitOrders.length))
                        message.InitOrders = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.InitOrders.push(reader.int32());
                    } else
                        message.InitOrders.push(reader.int32());   
                    break;         
                case 8:                    
                    if (!(message.InitBlocks && message.InitBlocks.length))
                        message.InitBlocks = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.InitBlocks.push(reader.int32());
                    } else
                        message.InitBlocks.push(reader.int32());   
                    break;         
                case 9:
                    message.BlockCount = reader.int32();  
                    break;         
                case 10:
                    message.Dynamic = reader.string();  
                    break;         
                case 11:                    
                    if (!(message.SpBlock && message.SpBlock.length))
                        message.SpBlock = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.SpBlock.push(reader.int32());
                    } else
                        message.SpBlock.push(reader.int32());   
                    break;         
                case 12:
                    message.SpShow = reader.int32();  
                    break;         
                case 13:                    
                    if (!(message.SpWeight1 && message.SpWeight1.length))
                        message.SpWeight1 = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.SpWeight1.push(reader.int32());
                    } else
                        message.SpWeight1.push(reader.int32());   
                    break;         
                case 14:                    
                    if (!(message.SpWeight2 && message.SpWeight2.length))
                        message.SpWeight2 = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.SpWeight2.push(reader.int32());
                    } else
                        message.SpWeight2.push(reader.int32());   
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Level"] = Level;

    
    // Defined in table: data/level.xlsx:Level;
    /** Properties of a Level_ARRAY. */
    export interface ILevel_ARRAY {
        
        
        Items?: (Level[]|null);
             
         
    }

     /** Represents a Level_ARRAY. */
    export class Level_ARRAY extends DataModel implements ILevel_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "Level_ARRAY";

        
                Items?: (Level[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new Level_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: ILevel_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Level_ARRAY): Level_ARRAY {
            return new Level_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Level_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Level_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(Level.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Level_ARRAY"] = Level_ARRAY;

    
    // Defined in table: data/block.xlsx:block;
    /** Properties of a Block. */
    export interface IBlock {
        
         /** ID */
        ID?: (number|null);
             
        
         /** 预设（宽,高,数据） */
        Prefab?: (number[]|null);
             
        
         /** 难度 */
        Difficulty?: (number|null);
             
        
         /** 最小地图大小，默认不限制 */
        MinSize?: (number|null);
             
        
         /** 最大地图大小(大于此值就不出现) */
        MaxSize?: (number|null);
             
        
         /** 出现权重1 */
        Rate1?: (number|null);
             
        
         /** 出现权重2 */
        Rate2?: (number|null);
             
        
         /** 出现权重3 */
        Rate3?: (number|null);
             
         
    }

     /** Represents a Block. */
    export class Block extends DataModel implements IBlock { 
        private static __id__ = 202;
        private static __type_name__ = "Block";
        private static __array_type_name__ = "Block_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[Block.__array_type_name__];
        }

         /** ID */
                ID?: (number|null) = 0;
                    
            
         /** 预设（宽,高,数据） */
                Prefab?: (number[]|null) = $util.emptyArray;
            
         /** 难度 */
                Difficulty?: (number|null) = 0;
                    
            
         /** 最小地图大小，默认不限制 */
                MinSize?: (number|null) = 0;
                    
            
         /** 最大地图大小(大于此值就不出现) */
                MaxSize?: (number|null) = 0;
                    
            
         /** 出现权重1 */
                Rate1?: (number|null) = 0;
                    
            
         /** 出现权重2 */
                Rate2?: (number|null) = 0;
                    
            
         /** 出现权重3 */
                Rate3?: (number|null) = 0;
                    
            
        

        /**
         * Constructs a new Block.
         * @param [properties] Properties to set
         */
        constructor(properties?: IBlock) {
            super();
            
            
            this.Prefab = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Block): Block {
            return new Block(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Block {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Block();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:                    
                    if (!(message.Prefab && message.Prefab.length))
                        message.Prefab = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.Prefab.push(reader.int32());
                    } else
                        message.Prefab.push(reader.int32());   
                    break;         
                case 3:
                    message.Difficulty = reader.int32();  
                    break;         
                case 4:
                    message.MinSize = reader.int32();  
                    break;         
                case 5:
                    message.MaxSize = reader.int32();  
                    break;         
                case 6:
                    message.Rate1 = reader.int32();  
                    break;         
                case 7:
                    message.Rate2 = reader.int32();  
                    break;         
                case 8:
                    message.Rate3 = reader.int32();  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Block"] = Block;

    
    // Defined in table: data/block.xlsx:block;
    /** Properties of a Block_ARRAY. */
    export interface IBlock_ARRAY {
        
        
        Items?: (Block[]|null);
             
         
    }

     /** Represents a Block_ARRAY. */
    export class Block_ARRAY extends DataModel implements IBlock_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "Block_ARRAY";

        
                Items?: (Block[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new Block_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: IBlock_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Block_ARRAY): Block_ARRAY {
            return new Block_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Block_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Block_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(Block.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Block_ARRAY"] = Block_ARRAY;

    
    // Defined in table: data/stage.xlsx:stage;
    /** Properties of a Stage. */
    export interface IStage {
        
         /** ID */
        ID?: (number|null);
             
        
         /** 场景资源 */
        ResID?: (number|null);
             
        
         /** 场景类型 */
        StageType?: (EStageType|null);
             
        
         /** 物品场景类型 */
        ItemSceneType?: (number|null);
             
         
    }

     /** Represents a Stage. */
    export class Stage extends DataModel implements IStage { 
        private static __id__ = 203;
        private static __type_name__ = "Stage";
        private static __array_type_name__ = "Stage_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[Stage.__array_type_name__];
        }

         /** ID */
                ID?: (number|null) = 0;
                    
            
         /** 场景资源 */
                ResID?: (number|null) = 0;
                    
            
         /** 场景类型 */
                StageType?: (EStageType|null) = EStageType.UNKNOWN;
                    
            
         /** 物品场景类型 */
                ItemSceneType?: (number|null) = 0;
                    
            
        

        /**
         * Constructs a new Stage.
         * @param [properties] Properties to set
         */
        constructor(properties?: IStage) {
            super();
            
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Stage): Stage {
            return new Stage(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Stage {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Stage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:
                    message.ResID = reader.uint32();  
                    break;         
                case 3:
                    message.StageType = reader.uint32();  
                    break;         
                case 4:
                    message.ItemSceneType = reader.int32();  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Stage"] = Stage;

    
    // Defined in table: data/stage.xlsx:stage;
    /** Properties of a Stage_ARRAY. */
    export interface IStage_ARRAY {
        
        
        Items?: (Stage[]|null);
             
         
    }

     /** Represents a Stage_ARRAY. */
    export class Stage_ARRAY extends DataModel implements IStage_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "Stage_ARRAY";

        
                Items?: (Stage[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new Stage_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: IStage_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Stage_ARRAY): Stage_ARRAY {
            return new Stage_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Stage_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Stage_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(Stage.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Stage_ARRAY"] = Stage_ARRAY;

    
    // Defined in table: data/level.xlsx:challenge_level;
    /** Properties of a ChallengeLevel. */
    export interface IChallengeLevel {
        
         /** ID */
        ID?: (number|null);
             
        
         /** 关卡ID */
        LevelID?: (number|null);
             
         
    }

     /** Represents a ChallengeLevel. */
    export class ChallengeLevel extends DataModel implements IChallengeLevel { 
        private static __id__ = 204;
        private static __type_name__ = "ChallengeLevel";
        private static __array_type_name__ = "ChallengeLevel_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[ChallengeLevel.__array_type_name__];
        }

         /** ID */
                ID?: (number|null) = 0;
                    
            
         /** 关卡ID */
                LevelID?: (number|null) = 0;
                    
            
        

        /**
         * Constructs a new ChallengeLevel.
         * @param [properties] Properties to set
         */
        constructor(properties?: IChallengeLevel) {
            super();
            
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: ChallengeLevel): ChallengeLevel {
            return new ChallengeLevel(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ChallengeLevel {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new ChallengeLevel();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:
                    message.LevelID = reader.uint32();  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["ChallengeLevel"] = ChallengeLevel;

    
    // Defined in table: data/level.xlsx:challenge_level;
    /** Properties of a ChallengeLevel_ARRAY. */
    export interface IChallengeLevel_ARRAY {
        
        
        Items?: (ChallengeLevel[]|null);
             
         
    }

     /** Represents a ChallengeLevel_ARRAY. */
    export class ChallengeLevel_ARRAY extends DataModel implements IChallengeLevel_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "ChallengeLevel_ARRAY";

        
                Items?: (ChallengeLevel[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new ChallengeLevel_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: IChallengeLevel_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: ChallengeLevel_ARRAY): ChallengeLevel_ARRAY {
            return new ChallengeLevel_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ChallengeLevel_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new ChallengeLevel_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(ChallengeLevel.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["ChallengeLevel_ARRAY"] = ChallengeLevel_ARRAY;

    
    // Defined in table: data/goods.xlsx:goods;
    /** Properties of a Goods. */
    export interface IGoods {
        
         /** ID */
        ID?: (number|null);
             
        
         /** 是否在商店显示 */
        Show?: (boolean|null);
             
        
         /** 显示名字 */
        Name?: (string|null);
             
        
         /** 场景资源 */
        Item?: (string|null);
             
        getItem(): Readonly<RewardData>;
        
         /** 金币购买价格 */
        GoldPrice?: (number|null);
             
        
         /** 是否能看广告获得 */
        ByAD?: (boolean|null);
             
        
         /** 限制次数 */
        Limit?: (number|null);
             
         
    }

     /** Represents a Goods. */
    export class Goods extends DataModel implements IGoods { 
        private static __id__ = 205;
        private static __type_name__ = "Goods";
        private static __array_type_name__ = "Goods_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[Goods.__array_type_name__];
        }

         /** ID */
                ID?: (number|null) = 0;
                    
            
         /** 是否在商店显示 */
                Show?: (boolean|null) = false;
                    
            
         /** 显示名字 */
                Name?: (string|null) = "";
                    
            
         /** 场景资源 */
                Item?: (string|null) = "";
                    
                
        getItem(): Readonly<RewardData> {
            return this.getConvertData("Item", this.Item, 'RewardData', true);
        };
            
         /** 金币购买价格 */
                GoldPrice?: (number|null) = 0;
                    
            
         /** 是否能看广告获得 */
                ByAD?: (boolean|null) = false;
                    
            
         /** 限制次数 */
                Limit?: (number|null) = 0;
                    
            
        

        /**
         * Constructs a new Goods.
         * @param [properties] Properties to set
         */
        constructor(properties?: IGoods) {
            super();
            
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Goods): Goods {
            return new Goods(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Goods {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Goods();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:
                    message.Show = reader.bool();  
                    break;         
                case 3:
                    message.Name = reader.string();  
                    break;         
                case 4:
                    message.Item = reader.string();  
                    break;         
                case 5:
                    message.GoldPrice = reader.uint32();  
                    break;         
                case 6:
                    message.ByAD = reader.bool();  
                    break;         
                case 7:
                    message.Limit = reader.uint32();  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Goods"] = Goods;

    
    // Defined in table: data/goods.xlsx:goods;
    /** Properties of a Goods_ARRAY. */
    export interface IGoods_ARRAY {
        
        
        Items?: (Goods[]|null);
             
         
    }

     /** Represents a Goods_ARRAY. */
    export class Goods_ARRAY extends DataModel implements IGoods_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "Goods_ARRAY";

        
                Items?: (Goods[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new Goods_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: IGoods_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Goods_ARRAY): Goods_ARRAY {
            return new Goods_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Goods_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Goods_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(Goods.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Goods_ARRAY"] = Goods_ARRAY;

    
    // Defined in table: data/task.xlsx:dailyTask;
    /** Properties of a DailyTask. */
    export interface IDailyTask {
        
         /** ID */
        ID?: (number|null);
             
        
         /** 任务类型 */
        TaskType?: (ETaskType|null);
             
        
         /** 参数 */
        Value?: (number|null);
             
        
         /** 是否每日任务 */
        IsDaily?: (boolean|null);
             
        
         /** 下一个任务,-1自己循环 */
        NextTask?: (number|null);
             
        
         /** 条件数值 */
        Num?: (number|null);
             
        
         /** 最大值 */
        MaxValue?: (number|null);
             
        
         /** 是否在上一个目标达成后减去Num */
        Clear?: (boolean|null);
             
        
         /** 奖励 */
        Reward?: (string|null);
             
        getReward(): Readonly<RewardData[]>;
        
         /** 描述 */
        Desc?: (number|null);
             
         
    }

     /** Represents a DailyTask. */
    export class DailyTask extends DataModel implements IDailyTask { 
        private static __id__ = 206;
        private static __type_name__ = "DailyTask";
        private static __array_type_name__ = "DailyTask_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[DailyTask.__array_type_name__];
        }

         /** ID */
                ID?: (number|null) = 0;
                    
            
         /** 任务类型 */
                TaskType?: (ETaskType|null) = ETaskType.UNKNOWN;
                    
            
         /** 参数 */
                Value?: (number|null) = 0;
                    
            
         /** 是否每日任务 */
                IsDaily?: (boolean|null) = false;
                    
            
         /** 下一个任务,-1自己循环 */
                NextTask?: (number|null) = 0;
                    
            
         /** 条件数值 */
                Num?: (number|null) = 0;
                    
            
         /** 最大值 */
                MaxValue?: (number|null) = 0;
                    
            
         /** 是否在上一个目标达成后减去Num */
                Clear?: (boolean|null) = false;
                    
            
         /** 奖励 */
                Reward?: (string|null) = "";
                    
                
        getReward(): Readonly<RewardData[]> {
            return this.getConvertData("Reward", this.Reward, 'RewardData[]', true);
        };
            
         /** 描述 */
                Desc?: (number|null) = 0;
                    
            
        

        /**
         * Constructs a new DailyTask.
         * @param [properties] Properties to set
         */
        constructor(properties?: IDailyTask) {
            super();
            
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: DailyTask): DailyTask {
            return new DailyTask(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): DailyTask {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new DailyTask();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:
                    message.TaskType = reader.uint32();  
                    break;         
                case 3:
                    message.Value = reader.int32();  
                    break;         
                case 4:
                    message.IsDaily = reader.bool();  
                    break;         
                case 5:
                    message.NextTask = reader.int32();  
                    break;         
                case 6:
                    message.Num = reader.uint32();  
                    break;         
                case 7:
                    message.MaxValue = reader.uint32();  
                    break;         
                case 8:
                    message.Clear = reader.bool();  
                    break;         
                case 9:
                    message.Reward = reader.string();  
                    break;         
                case 10:
                    message.Desc = reader.uint32();  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["DailyTask"] = DailyTask;

    
    // Defined in table: data/task.xlsx:dailyTask;
    /** Properties of a DailyTask_ARRAY. */
    export interface IDailyTask_ARRAY {
        
        
        Items?: (DailyTask[]|null);
             
         
    }

     /** Represents a DailyTask_ARRAY. */
    export class DailyTask_ARRAY extends DataModel implements IDailyTask_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "DailyTask_ARRAY";

        
                Items?: (DailyTask[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new DailyTask_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: IDailyTask_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: DailyTask_ARRAY): DailyTask_ARRAY {
            return new DailyTask_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): DailyTask_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new DailyTask_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(DailyTask.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["DailyTask_ARRAY"] = DailyTask_ARRAY;

    
    // Defined in table: data/guide.xlsx:guide;
    /** Properties of a Guide. */
    export interface IGuide {
        
         /** id */
        ID?: (number|null);
             
        
         /** 引导描述 */
        Desc?: (string|null);
             
         
    }

     /** Represents a Guide. */
    export class Guide extends DataModel implements IGuide { 
        private static __id__ = 207;
        private static __type_name__ = "Guide";
        private static __array_type_name__ = "Guide_ARRAY";
        static getArrayType(): any {
            return ALLTYPES[Guide.__array_type_name__];
        }

         /** id */
                ID?: (number|null) = 0;
                    
            
         /** 引导描述 */
                Desc?: (string|null) = "";
                    
            
        

        /**
         * Constructs a new Guide.
         * @param [properties] Properties to set
         */
        constructor(properties?: IGuide) {
            super();
            
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Guide): Guide {
            return new Guide(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Guide {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Guide();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:
                    message.ID = reader.uint32();  
                    break;         
                case 2:
                    message.Desc = reader.string();  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Guide"] = Guide;

    
    // Defined in table: data/guide.xlsx:guide;
    /** Properties of a Guide_ARRAY. */
    export interface IGuide_ARRAY {
        
        
        Items?: (Guide[]|null);
             
         
    }

     /** Represents a Guide_ARRAY. */
    export class Guide_ARRAY extends DataModel implements IGuide_ARRAY { 
        private static __id__ = 0;
        private static __type_name__ = "Guide_ARRAY";

        
                Items?: (Guide[]|null) = $util.emptyArray;
            
        

        /**
         * Constructs a new Guide_ARRAY.
         * @param [properties] Properties to set
         */
        constructor(properties?: IGuide_ARRAY) {
            super();
            
            
            this.Items = [];
                    
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        static create(properties?: Guide_ARRAY): Guide_ARRAY {
            return new Guide_ARRAY(properties);
        } 
        static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Guide_ARRAY {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length;
            var message: any = new Guide_ARRAY();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {        
                case 1:                    
                    if (!(message.Items && message.Items.length))
                        message.Items = [];
                    message.Items.push(Guide.decode(reader, reader.uint32()));  
                    break;  
                default:
                    reader.skipType(tag & 7);
                    break;
                } 
            }
            return message;
        }      
    } 
    ALLTYPES["Guide_ARRAY"] = Guide_ARRAY; 
}

export class TableDefine {
    public static readonly ResourcesTable = new DataTable(GameConfig.Resources);  
    public static readonly SettingsTable = new DataTable(GameConfig.Settings);  
    public static readonly ItemTable = new DataTable(GameConfig.Item);  
    public static readonly LevelTable = new DataTable(GameConfig.Level);  
    public static readonly BlockTable = new DataTable(GameConfig.Block);  
    public static readonly StageTable = new DataTable(GameConfig.Stage);  
    public static readonly ChallengeLevelTable = new DataTable(GameConfig.ChallengeLevel);  
    public static readonly GoodsTable = new DataTable(GameConfig.Goods);  
    public static readonly DailyTaskTable = new DataTable(GameConfig.DailyTask);  
    public static readonly GuideTable = new DataTable(GameConfig.Guide);   
}